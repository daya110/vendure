// @ts-check
const fs = require('fs');
const path = require('path');
// This script finds all app sources and then generates a "public-api.ts" file exporting their
// contents. This is then used as the public API entrypoint for the Angular CLI's library
// builder process.

console.log('Generating public api...');
const SOURCES_DIR = path.join(__dirname, 'src/app');
const APP_SOURCE_FILE_PATTERN = /\.(pipe|service|component|module|routes|directive|guard|config)\.ts$/;
const files = [];
const publicApiFilePath = path.join(__dirname, 'src');
forMatchingFiles(SOURCES_DIR, APP_SOURCE_FILE_PATTERN, filename => {
    const relativeFilename = '.' + filename.replace(publicApiFilePath, '')
        .replace(/\\/g, '/')
        .replace(/\.ts$/, '');
    files.push(relativeFilename);
});

const header = `// This file was generated by the build-public-api.ts script\n`;
const fileContents = header + files.map(f => `export * from '${f}';`).join('\n');
fs.writeFileSync(path.join(publicApiFilePath, 'public-api.ts'), fileContents, 'utf8');
console.log('Done!');

/**
 *
 * @param startPath {string}
 * @param filter {RegExp}
 * @param callback {(filename: string) => void}
 */
function forMatchingFiles(startPath, filter, callback) {
    if (!fs.existsSync(startPath)) {
        console.log('Starting path does not exist ', startPath);
        return;
    }

    const files = fs.readdirSync(startPath);
    for (let i = 0; i < files.length; i++) {
        const filename = path.join(startPath, files[i]);
        const stat = fs.lstatSync(filename);
        if (stat.isDirectory()) {
            forMatchingFiles(filename, filter, callback); // recurse
        } else if (filter.test(filename)) {
            callback(filename);
        }
    }
}
