type Query {
    activeChannel: Channel!
    activeCustomer: Customer
    activeOrder: Order
    availableCountries: [Country!]!
    collections(options: CollectionListOptions): CollectionList!
    collection(id: ID!): Collection
    eligibleShippingMethods: [ShippingMethodQuote!]!
    me: CurrentUser
    nextOrderStates: [String!]!
    order(id: ID!): Order
    orderByCode(code: String!): Order
    "Get a Product either by id or slug. If neither 'id' nor 'slug' is speicified, an error will result."
    product(id: ID, slug: String): Product
    products(options: ProductListOptions): ProductList!
    search(input: SearchInput!): SearchResponse!
}

type Mutation {
    "Adds an item to the order. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available."
    addItemToOrder(productVariantId: ID!, quantity: Int!): Order
    removeOrderLine(orderLineId: ID!): Order
    "Adjusts an OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available."
    adjustOrderLine(orderLineId: ID!, quantity: Int): Order
    "Applies the given coupon code to the active Order"
    applyCouponCode(couponCode: String!): Order
    "Removes the given coupon code from the active Order"
    removeCouponCode(couponCode: String!): Order
    transitionOrderToState(state: String!): Order
    setOrderShippingAddress(input: CreateAddressInput!): Order
    setOrderShippingMethod(shippingMethodId: ID!): Order
    addPaymentToOrder(input: PaymentInput!): Order
    setCustomerForOrder(input: CreateCustomerInput!): Order
    login(username: String!, password: String!, rememberMe: Boolean): LoginResult!
    logout: Boolean!
    "Regenerate and send a verification token for a new Customer registration. Only applicable if `authOptions.requireVerification` is set to true."
    refreshCustomerVerification(emailAddress: String!): Boolean!
    "Register a Customer account with the given credentials"
    registerCustomerAccount(input: RegisterCustomerInput!): Boolean!
    "Update an existing Customer"
    updateCustomer(input: UpdateCustomerInput!): Customer!
    "Create a new Customer Address"
    createCustomerAddress(input: CreateAddressInput!): Address!
    "Update an existing Address"
    updateCustomerAddress(input: UpdateAddressInput!): Address!
    "Delete an existing Address"
    deleteCustomerAddress(id: ID!): Boolean!
    "Verify a Customer email address with the token sent to that address. Only applicable if `authOptions.requireVerification` is set to true."
    verifyCustomerAccount(token: String!, password: String!): LoginResult!
    "Update the password of the active Customer"
    updateCustomerPassword(currentPassword: String!, newPassword: String!): Boolean
    """
    Request to update the emailAddress of the active Customer. If `authOptions.requireVerification` is enabled
    (as is the default), then the `identifierChangeToken` will be assigned to the current User and
    a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email
    that verification token to the Customer, which is then used to verify the change of email address.
    """
    requestUpdateCustomerEmailAddress(password: String!, newEmailAddress: String!): Boolean
    """
    Confirm the update of the emailAddress with the provided token, which has been generated by the
    `requestUpdateCustomerEmailAddress` mutation.
    """
    updateCustomerEmailAddress(token: String!): Boolean
    "Requests a password reset email to be sent"
    requestPasswordReset(emailAddress: String!): Boolean
    "Resets a Customer's password based on the provided token"
    resetPassword(token: String!, password: String!): LoginResult!
}

input RegisterCustomerInput {
    emailAddress: String!
    title: String
    firstName: String
    lastName: String
    password: String
}

input UpdateCustomerInput {
    title: String
    firstName: String
    lastName: String
    phoneNumber: String
}

"""
Passed as input to the `addPaymentToOrder` mutation.
"""
input PaymentInput {
    """
    This field should correspond to the `code` property of a PaymentMethodHandler.
    """
    method: String!
    """
    This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method
    as the "metadata" argument. For example, it could contain an ID for the payment and other
    data generated by the payment provider.
    """
    metadata: JSON!
}

# generated by generateListOptions function
input CollectionListOptions

# generated by generateListOptions function
input OrderListOptions

# generated by generateListOptions function
input ProductListOptions

