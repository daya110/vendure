{{#if isTs }}import{{ else }}const{{/if}} {
    bootstrap,
    fakePalPaymentHandler,
    gripePaymentHandler,
    defaultEmailTypes,
    HandlebarsMjmlGenerator,
    DefaultAssetServerPlugin,
} {{#if isTs}}from 'vendure'; {{ else }}= require('vendure');{{/if}}
{{#if isTs }}
import * as path from 'path';
{{ else }}
const path = require('path');
{{/if}}

bootstrap({
    defaultChannelToken: 'default-channel',
    authOptions: {
        sessionSecret: '{{ sessionSecret }}',
    },
    port: 3000,
    apiPath: 'api',
    dbConnectionOptions: {
        type: '{{ dbType }}',
        synchronize: true, // turn this off for production
        logging: false,
        host: '{{ dbHost }}',
        port: 3306,
        username: '{{ dbUserName }}',
        password: '{{ dbPassword }}',
        database: '{{ dbName }}',
    },
    paymentOptions: {
        paymentMethodHandlers: [fakePalPaymentHandler, gripePaymentHandler],
    },
    customFields: {},
    emailOptions: {
        emailTypes: defaultEmailTypes,
        generator: new HandlebarsMjmlGenerator(path.join(__dirname, 'vendure', 'email', 'templates', 'partials')),
        transport: {
            type: 'file',
            outputPath: path.join(__dirname, 'vendure', 'email', 'test-emails'),
        },
    },
    importExportOptions: {
        importAssetsDir: path.join(__dirname, 'vendure', 'import-assets'),
    },
    plugins: [
        new DefaultAssetServerPlugin({
            route: 'assets',
            assetUploadDir: path.join(__dirname, 'vendure', 'assets'),
            port: 4000,
            hostname: 'http://localhost',
            previewMaxHeight: 1600,
            previewMaxWidth: 1600,
            presets: [
                { name: 'tiny', width: 50, height: 50, mode: 'crop' },
                { name: 'thumb', width: 150, height: 150, mode: 'crop' },
                { name: 'small', width: 300, height: 300, mode: 'resize' },
                { name: 'medium', width: 500, height: 500, mode: 'resize' },
                { name: 'large', width: 800, height: 800, mode: 'resize' },
            ],
        }),
    ],
}).catch(err => {
    console.log(err);
});
