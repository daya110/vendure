type Query {
    facets(languageCode: LanguageCode, options: FacetListOptions): FacetList!
    facet(id: ID!, languageCode: LanguageCode): Facet
}

type Mutation {
    "Create a new Facet"
    createFacet(input: CreateFacetInput): Facet!
    "Update an existing Facet"
    updateFacet(input: UpdateFacetInput): Facet!
}

type FacetList implements PaginatedList {
    items: [Facet!]!
    totalItems: Int!
}

input FacetListOptions {
    take: Int
    skip: Int
    sort: FacetSortParameter
    filter: FacetFilterParameter
}

input FacetSortParameter {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    name: SortOrder
    code: SortOrder
}

input FacetFilterParameter {
    name: StringOperators
    code: StringOperators
    createdAt: DateOperators
    updatedAt: DateOperators
}
