type Query {
  roles(options: RoleListOptions): RoleList!
  role(id: ID!): Role
}

type Mutation {
  "Create a new Role"
  createRole(input: CreateRoleInput!): Role!
  "Update an existing new Role"
  updateRole(input: UpdateRoleInput!): Role!
}

type RoleList implements PaginatedList {
    items: [Role!]!
    totalItems: Int!
}

input RoleListOptions {
    take: Int
    skip: Int
    sort: RoleSortParameter
    filter: RoleFilterParameter
}

input RoleSortParameter {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    code: SortOrder
    description: SortOrder
}

input RoleFilterParameter {
    code: StringOperators
    description: StringOperators
    createdAt: DateOperators
    updatedAt: DateOperators
}
