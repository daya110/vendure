type Query {
    customers(options: CustomerListOptions): CustomerList!
    customer(id: ID!): Customer
    activeCustomer: Customer
}

type Mutation {
    "Create a new Customer. If a password is provided, a new User will also be created an linked to the Customer."
    createCustomer(input: CreateCustomerInput!, password: String): Customer!

    "Update an existing Customer"
    updateCustomer(input: UpdateCustomerInput!): Customer!

    "Delete a Customer"
    deleteCustomer(id: ID!): DeletionResponse!

    "Create a new Address and associate it with the Customer specified by customerId"
    createCustomerAddress(customerId: ID!, input: CreateAddressInput!): Address!

    "Update an existing Address"
    updateCustomerAddress(input: UpdateAddressInput!): Address!
}

type CustomerList implements PaginatedList {
    items: [Customer!]!
    totalItems: Int!
}

input CustomerListOptions {
    take: Int
    skip: Int
    sort: CustomerSortParameter
    filter: CustomerFilterParameter
}

input CustomerSortParameter {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    firstName: SortOrder
    lastName: SortOrder
    phoneNumber: SortOrder
    emailAddress: SortOrder
}

input CustomerFilterParameter {
    firstName: StringOperators
    lastName: StringOperators
    phoneNumber: StringOperators
    emailAddress: StringOperators
    createdAt: DateOperators
    updatedAt: DateOperators
}
