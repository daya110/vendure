type Query {
    products(languageCode: LanguageCode, options: ProductListOptions): ProductList!
    product(id: ID!, languageCode: LanguageCode): Product
}

type Mutation {
    "Create a new Product"
    createProduct(input: CreateProductInput): Product!
    "Update an existing Product"
    updateProduct(input: UpdateProductInput): Product!
    "Add an OptionGroup to a Product"
    addOptionGroupToProduct(productId: ID!, optionGroupId: ID!): Product!
    "Remove an OptionGroup from a Product"
    removeOptionGroupFromProduct(productId: ID!, optionGroupId: ID!): Product!
    "Create a set of ProductVariants based on the OptionGroups assigned to the given Product"
    generateVariantsForProduct(productId: ID!, defaultPrice: Int, defaultSku: String): Product!
    "Update existing ProductVariants"
    updateProductVariants(input: [UpdateProductVariantInput!]!): [ProductVariant]!
}

type ProductList implements PaginatedList {
    items: [Product!]!
    totalItems: Int!
}

input ProductListOptions {
    take: Int
    skip: Int
    sort: ProductSortParameter
    filter: ProductFilterParameter
}

input ProductSortParameter {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    name: SortOrder
    slug: SortOrder
    description: SortOrder
    image: SortOrder
}

input ProductFilterParameter {
    name: StringOperators
    slug: StringOperators
    description: StringOperators
    createdAt: DateOperators
    updatedAt: DateOperators
}
